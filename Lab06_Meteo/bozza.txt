package it.polito.tdp.meteo.model;

import java.util.ArrayList;
import java.util.List;

import it.polito.tdp.meteo.DAO.MeteoDAO;

public class Model {
	
	private final static int COST = 100;
	private final static int NUMERO_GIORNI_CITTA_CONSECUTIVI_MIN = 3;
	private final static int NUMERO_GIORNI_CITTA_MAX = 6;
	private final static int NUMERO_GIORNI_TOTALI = 15;
	private List<Citta> citta; 
	private List<Citta> soluzioneMigliore;
	private List<Citta> parziale;
	private double costoMigliore;
	
	private MeteoDAO meteoDao;
	
	public Model() {
		meteoDao= new MeteoDAO();
	}

	// of course you can change the String output with what you think works best
	public String getUmiditaMedia(int mese) {
		List<Integer> umidita= meteoDao.getAllUmiditaMese(mese);
		Integer somma=0;
		double media=0;
		for(Integer i: umidita) {
			somma+=i;			
		}
		media=(double)somma/umidita.size();
		
		return String.valueOf(media) ;
	}
	
	// of course you can change the String output with what you think works best
	public List<Citta> trovaSequenza(int mese) {
		citta= new ArrayList<>();
		citta.add(new Citta("genova",meteoDao.getAllRilevamentiLocalitaMese(mese, "Genova")));
		citta.add(new Citta("milano",meteoDao.getAllRilevamentiLocalitaMese(mese, "Milano")));
		citta.add(new Citta("torino",meteoDao.getAllRilevamentiLocalitaMese(mese, "Torino")));
		
		parziale= new ArrayList<>();
		//soluzioneMigliore= new ArrayList<>();
		double costo=0;
		costoMigliore=0;
		cerca(parziale,0,costo);		
		return soluzioneMigliore;
	}

	private void cerca(List<Citta> parziale, int livello, double costo) {
		//caso terminale
		/*if(costo<costoMigliore) {
			soluzioneMigliore= new ArrayList<>(parziale);
			costoMigliore=costo;
		}
		if(livello==this.NUMERO_GIORNI_TOTALI)
			return;*/
		if(costo>costoMigliore)
			return;
		if(livello==this.NUMERO_GIORNI_TOTALI) {
			soluzioneMigliore= new ArrayList<>(parziale);
			costoMigliore=costo;
			return;
		}
		for(Citta c: citta) {
		/*	***VERSIONE1***
						if(c.getCounter()>this.NUMERO_GIORNI_CITTA_MAX)
							return;
						else {
							parziale.add(c);
							c.increaseCounter();
							costo+=c.getRilevamenti().get(livello).getUmidita(); */
		//	***VERSIONE2***
		if(c.getCounter()<=this.NUMERO_GIORNI_CITTA_MAX) {
			//inizializzazione
			boolean nuova=false;
			Citta cittaPrecedente1=null;
			Citta cittaPrecedente2=null;
			
			parziale.add(c);
			c.increaseCounter();
			costo+=c.getRilevamenti().get(livello).getUmidita();							
			//	***AGGIUNGI PEZZO SUCCESSIVO***						
			if(livello<3 && livello>0) {
				//controllo che siano uguali e se lo sono va bene, se no return
				if(!(parziale.get(livello).getNome().equals(parziale.get(livello-1).getNome())))
					return;
			}
			if(livello>=3) {
				//controllo se ho cambiato citt√†, se non l'ho cambiata va bene, se l'ho cambiata va bene 
				if(!(parziale.get(livello).getNome().equals(parziale.get(livello-1).getNome()) && !nuova)) {
					nuova=true;
					cittaPrecedente1=parziale.get(livello);	
					cittaPrecedente2=null;
					costo+=100;
				}
					
				else if(nuova && cittaPrecedente2==null)
					if(parziale.get(livello).getNome().equals(cittaPrecedente1.getNome()))
						cittaPrecedente2=parziale.get(livello);
					else
						return;
						
				else if(cittaPrecedente2!=null) {
					if(parziale.get(livello).getNome().equals(cittaPrecedente2.getNome()))
						nuova=false;
					else
						return;
					}
			}
			cerca(parziale,livello+1,costo);
			parziale.remove(c);
			c.setCounter(c.getCounter()-1);
		}
			
		/*for(Citta c: citta) {
			while(c.getCounter()<=this.NUMERO_GIORNI_CITTA_CONSECUTIVI_MIN || c.getCounter()<=this.NUMERO_GIORNI_CITTA_MAX) {
				parziale.add(c);
				c.increaseCounter();
				costo+=c.getRilevamenti().get(livello).getUmidita();
				
				/*if(costo>costoMigliore)
					return;
				else
					costoMigliore=costo;*/
			/*}	
			costo+=this.COST;
			cerca(parziale,livello+1,soluzioneMigliore); //ricorsione
			parziale.remove(c); //backtracking
		}*/
		
		/*for(Citta c: citta) {
			for(int i=livello; i<this.NUMERO_GIORNI_TOTALI; i++) {
				parziale.add(c);
				c.increaseCounter();
				costo+=c.getRilevamenti().get(i).getUmidita();
				if(i>3) {
					cerca(parziale,livello+1,soluzioneMigliore);
				}
			}
		}*/
		
		/*for(Citta c: citta) {
				if(parziale.size()<=3) {
					while(c.getCounter()<this.NUMERO_GIORNI_CITTA_CONSECUTIVI_MIN) {
						parziale.add(c);
						costo+=c.getRilevamenti().get((livello*3)+c.getCounter()).getUmidita();
						c.increaseCounter();
						cerca(parziale,livello,soluzioneMigliore);
					}
					parziale.clear();
				}*/
		
		/*for(Citta c: citta) {
			if(c.getCounter()>this.NUMERO_GIORNI_CITTA_MAX)
				return;
			else {
				parziale.add(c);
				c.increaseCounter();
				costo+=c.getRilevamenti().get(livello).getUmidita();
				//Aggiungi pezzo successivo
				cerca(parziale,livello+1);
				parziale.remove(c);
				c.setCounter(c.getCounter()-1);
			}
			//pezzo successivo
			if(livello==3) {
				Citta c1= parziale.get(livello);
				Citta c2= parziale.get(livello+1);
				Citta c3= parziale.get(livello+2);
				if(!(c1.getNome().equals(c2.getNome()) && c2.getNome().equals(c3.getNome()))) {
					return;
				}

			}
			if(livello>=3) {
				if(!(parziale.get(livello).getNome().equals(parziale.get(livello-1).getNome()))) {
					costo+=this.COST;
					
					
				}
			}
		}
				
				
				
					
			
		}*/
		
		
		
		
	}
	}
}
	


